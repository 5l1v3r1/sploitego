#!/usr/bin/env python

import logging
import sys
from os import execvp, geteuid, name
from traceback import format_exc
from sploitego.maltego.message import MaltegoException, MaltegoTransformResponseMessage
from sploitego.maltego.utils import onterminate, parseargs, croak, message

__author__ = 'Nadeem Douba'
__copyright__ = 'Copyright 2012, Sploitego Project'
__credits__ = ['Nadeem Douba']

__license__ = 'GPL'
__version__ = '0.1'
__maintainer__ = 'Nadeem Douba'
__email__ = 'ndouba@gmail.com'
__status__ = 'Development'

def main(*args):

    logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

    [script, params, value, fields] = parseargs(args)

    m = None
    try:
        if '' not in sys.path:
            sys.path.insert(0, '')
        m = __import__(script, globals(), locals(), ['dotransform'])
        if name == 'posix' and hasattr(m.dotransform, 'privileged') and geteuid():
            execvp('pysetuid', ['pysetuid'] + list(args))
            sys.exit(-1)

        if hasattr(m, 'onterminate'):
            onterminate(m.onterminate)
        else:
            m.__setattr__('onterminate', lambda *args: sys.exit(-1))

        msg = m.dotransform(
            type(
                'MaltegoTransformRequestMessage',
                (object,),
                {
                    'value' : value,
                    'fields' : fields,
                    'params' : params
                }
            )(),
            MaltegoTransformResponseMessage()
        )

        if isinstance(msg, MaltegoTransformResponseMessage):
            message(msg)
        elif isinstance(msg, basestring):
            raise MaltegoException(msg)
        else:
            raise MaltegoException('Could not resolve message type returned by transform.')
    except MaltegoException, me:
        croak(str(me))
    except ImportError:
        e = format_exc()
        croak(e)
    except Exception:
        e = format_exc()
        croak(e)
    except KeyboardInterrupt, be:
        if m is not None:
            m.onterminate()


if __name__ == '__main__':
    main(*sys.argv)