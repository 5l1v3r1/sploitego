#!/usr/bin/env python

import logging
import sys
from os import execvp, geteuid, name
from traceback import format_exc
from sploitego.maltego.message import MaltegoException, MaltegoTransformResponseMessage
from sploitego.maltego.utils import onterminate, parseargs

__author__ = 'Nadeem Douba'
__copyright__ = 'Copyright 2012, Sploitego Project'
__credits__ = [ 'Nadeem Douba' ]

__license__ = 'GPL'
__version__ = '0.1'
__maintainer__ = 'Nadeem Douba'
__email__ = 'ndouba@gmail.com'
__status__ = 'Development'


def hl(string, color, bold):
    attr = []
    if color == 'green':
        # green
        attr.append('32')
    elif color == 'red':
        # red
        attr.append('31')
    else:
        attr.append('30')
    if bold:
        attr.append('1')
    return '\x1b[%sm%s\x1b[0m' % (';'.join(attr), string)


def croak(exc):
    print hl(exc, 'red', None)


def message(msg, tab=-1):
    tab += 1
    print '%s`- %s: %s %s' % (
        '  ' * tab,
        hl(msg.tag, None, True),
        hl(msg.text, 'red', False) if msg.text is not None else '',
        hl(msg.attrib, 'green', True) if msg.attrib.keys() else ''
        )
    for c in msg.getchildren():
        print '  %s`- %s: %s %s' % (
            '  ' * tab,
            hl(c.tag, None, True),
            hl(c.text, 'red', False) if c.text is not None else '',
            hl(c.attrib, 'green', True) if c.attrib.keys() else ''
            )
        for sc in c.getchildren():
            tab += 1
            message(sc, tab)
            tab -= 1
    tab -= 1


def main(*args):

    logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

    [script, params, value, fields] = parseargs(args)

    m = None

    try:
        if '' not in sys.path:
            sys.path.insert(0, '')
        m = __import__(script, globals(), locals(), ['dotransform'])
        if name == 'posix' and hasattr(m.dotransform, 'privileged') and geteuid():
            execvp('pysetuid', ['pysetuid'] + list(args))
            sys.exit(-1)

        if hasattr(m, 'onterminate'):
            onterminate(m.onterminate)
        else:
            m.__setattr__('onterminate', lambda *args: sys.exit(-1))

        msg = m.dotransform(
            type(
                'MaltegoTransformRequestMessage',
                (object,),
                    {
                    'value' : value,
                    'fields' : fields,
                    'params' : params
                }
            )(),
            MaltegoTransformResponseMessage()
        )

        if isinstance(msg, MaltegoTransformResponseMessage):
            message(msg)
        elif isinstance(msg, basestring):
            raise MaltegoException(msg)
        else:
            raise MaltegoException('Could not resolve message type returned by transform.')
    except MaltegoException, me:
        croak(str(me))
    except ImportError:
        e = format_exc()
        croak(e)
    except Exception:
        e = format_exc()
        croak(e)
    except KeyboardInterrupt, be:
        if m is not None:
            m.onterminate()


if __name__ == '__main__':
    main(*sys.argv)